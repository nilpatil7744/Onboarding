{"ast":null,"code":"var _jsxFileName = \"/home/nil/Documents/Onboarding/onboarding-app/src/Components/ProgressBar/index.js\";\nimport React from \"react\";\nimport \"react-step-progress-bar/styles.css\";\nimport { ProgressBar, Step } from \"react-step-progress-bar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst steps = [{\n  status: \"1\"\n}, {\n  status: \"2\"\n}, {\n  status: \"3\"\n}, {\n  status: \"4\"\n}];\n\nconst ProgressBarUi = props => {\n  const transfer = {\n    status: \"Compile\" // change transfer status to progress bar\n\n  };\n\n  const getStepPosition = transferStatus => {\n    return steps.findIndex(({\n      status\n    }) => status === transferStatus);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 50\n      },\n      children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n        width: 500,\n        percent: 100 * ((getStepPosition(transfer.status) + 1) / (steps.length - 0)) - -15,\n        filledBackground: \"linear-gradient(to right, #41ad49, #41ad49)\",\n        children: steps.map((step, index, arr) => {\n          console.log(step, index, arr, \"kokokoko\");\n          return /*#__PURE__*/_jsxDEV(Step // position={100 * (index / arr.length)}\n          , {\n            transition: \"scale\",\n            children: ({\n              accomplished\n            }) => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                borderRadius: \"50%\",\n                width: 40,\n                height: 50,\n                color: \"black\",\n                backgroundColor: accomplished ? \"green\" : \"gray\"\n              },\n              children: step.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = ProgressBarUi;\nexport default ProgressBarUi;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressBarUi\");","map":{"version":3,"sources":["/home/nil/Documents/Onboarding/onboarding-app/src/Components/ProgressBar/index.js"],"names":["React","ProgressBar","Step","steps","status","ProgressBarUi","props","transfer","getStepPosition","transferStatus","findIndex","margin","length","map","step","index","arr","console","log","accomplished","display","alignItems","justifyContent","borderRadius","width","height","color","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oCAAP;AACA,SAASC,WAAT,EAAsBC,IAAtB,QAAkC,yBAAlC;;;AAEA,MAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,MAAM,EAAE;AADV,CADY,EAIZ;AACEA,EAAAA,MAAM,EAAE;AADV,CAJY,EAOZ;AACEA,EAAAA,MAAM,EAAE;AADV,CAPY,EAUZ;AACEA,EAAAA,MAAM,EAAE;AADV,CAVY,CAAd;;AAcA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAMC,QAAQ,GAAG;AACfH,IAAAA,MAAM,EAAE,SADO,CACI;;AADJ,GAAjB;;AAIA,QAAMI,eAAe,GAAIC,cAAD,IAAoB;AAC1C,WAAON,KAAK,CAACO,SAAN,CAAgB,CAAC;AAAEN,MAAAA;AAAF,KAAD,KAAgBA,MAAM,KAAKK,cAA3C,CAAP;AACD,GAFD;;AAGA,sBACE;AAAA,2BACE;AAAK,MAAA,KAAK,EAAE;AAAEE,QAAAA,MAAM,EAAE;AAAV,OAAZ;AAAA,6BACE,QAAC,WAAD;AACE,QAAA,KAAK,EAAE,GADT;AAEE,QAAA,OAAO,EACL,OACG,CAACH,eAAe,CAACD,QAAQ,CAACH,MAAV,CAAf,GAAmC,CAApC,KAA0CD,KAAK,CAACS,MAAN,GAAe,CAAzD,CADH,IAEA,CAAC,EALL;AAOE,QAAA,gBAAgB,EAAC,6CAPnB;AAAA,kBASGT,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,KAAsB;AAC/BC,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkBC,KAAlB,EAAyBC,GAAzB,EAA8B,UAA9B;AACA,8BACE,QAAC,IAAD,CACE;AADF;AAEE,YAAA,UAAU,EAAC,OAFb;AAGE,YAAA,QAAQ,EAAE,CAAC;AAAEG,cAAAA;AAAF,aAAD,kBACR;AACE,cAAA,KAAK,EAAE;AACLC,gBAAAA,OAAO,EAAE,MADJ;AAELC,gBAAAA,UAAU,EAAE,QAFP;AAGLC,gBAAAA,cAAc,EAAE,QAHX;AAILC,gBAAAA,YAAY,EAAE,KAJT;AAKLC,gBAAAA,KAAK,EAAE,EALF;AAMLC,gBAAAA,MAAM,EAAE,EANH;AAOLC,gBAAAA,KAAK,EAAE,OAPF;AAQLC,gBAAAA,eAAe,EAAER,YAAY,GAAG,OAAH,GAAa;AARrC,eADT;AAAA,wBAYGL,IAAI,CAACV;AAZR;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,kBADF;AAsBD,SAxBA;AATH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAyCD,CAjDD;;KAAMC,a;AAkDN,eAAeA,aAAf","sourcesContent":["import React from \"react\";\nimport \"react-step-progress-bar/styles.css\";\nimport { ProgressBar, Step } from \"react-step-progress-bar\";\n\nconst steps = [\n  {\n    status: \"1\",\n  },\n  {\n    status: \"2\",\n  },\n  {\n    status: \"3\",\n  },\n  {\n    status: \"4\",\n  },\n];\nconst ProgressBarUi = (props) => {\n  const transfer = {\n    status: \"Compile\", // change transfer status to progress bar\n  };\n\n  const getStepPosition = (transferStatus) => {\n    return steps.findIndex(({ status }) => status === transferStatus);\n  };\n  return (\n    <>\n      <div style={{ margin: 50 }}>\n        <ProgressBar\n          width={500}\n          percent={\n            100 *\n              ((getStepPosition(transfer.status) + 1) / (steps.length - 0)) -\n            -15\n          }\n          filledBackground=\"linear-gradient(to right, #41ad49, #41ad49)\"\n        >\n          {steps.map((step, index, arr) => {\n            console.log(step, index, arr, \"kokokoko\");\n            return (\n              <Step\n                // position={100 * (index / arr.length)}\n                transition=\"scale\"\n                children={({ accomplished }) => (\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                      borderRadius: \"50%\",\n                      width: 40,\n                      height: 50,\n                      color: \"black\",\n                      backgroundColor: accomplished ? \"green\" : \"gray\",\n                    }}\n                  >\n                    {step.status}\n                  </div>\n                )}\n              />\n            );\n          })}\n        </ProgressBar>\n      </div>\n    </>\n  );\n};\nexport default ProgressBarUi;\n"]},"metadata":{},"sourceType":"module"}