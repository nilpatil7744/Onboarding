{"ast":null,"code":"import React from\"react\";import\"react-step-progress-bar/styles.css\";import{ProgressBar,Step}from\"react-step-progress-bar\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var steps=[{status:\"1\"},{status:\"2\"},{status:\"3\"},{status:\"4\"}];var ProgressBarUi=function ProgressBarUi(props){var transfer={status:\"Compile\"// change transfer status to progress bar\n};var getStepPosition=function getStepPosition(transferStatus){return steps.findIndex(function(_ref){var status=_ref.status;return status===transferStatus;});};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{style:{margin:45},children:/*#__PURE__*/_jsx(ProgressBar,{width:310,height:3,percent:100*((getStepPosition(transfer.status)+1)/(steps.length-0))- -props.phase,filledBackground:\"linear-gradient(to right, #6A5EE5, #6A5EE5)\",children:steps.map(function(step,index,arr){return/*#__PURE__*/_jsx(Step// position={100 * (index / arr.length)}\n,{transition:\"scale\",children:function children(_ref2){var accomplished=_ref2.accomplished;return/*#__PURE__*/_jsx(\"div\",{style:{display:\"flex\",alignItems:\"center\",justifyContent:\"center\",borderRadius:\"50%\",width:40,height:40,border:\"1px solid gray\",color:accomplished?\"white\":\"gray\",backgroundColor:accomplished?\"#6A5EE5\":\"white\"},children:step.status});}});})})})});};export default ProgressBarUi;","map":{"version":3,"sources":["/home/nil/Documents/Onboarding/src/Components/ProgressBar/index.js"],"names":["React","ProgressBar","Step","steps","status","ProgressBarUi","props","transfer","getStepPosition","transferStatus","findIndex","margin","length","phase","map","step","index","arr","accomplished","display","alignItems","justifyContent","borderRadius","width","height","border","color","backgroundColor"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,oCAAP,CACA,OAASC,WAAT,CAAsBC,IAAtB,KAAkC,yBAAlC,C,gGAEA,GAAMC,CAAAA,KAAK,CAAG,CACZ,CACEC,MAAM,CAAE,GADV,CADY,CAIZ,CACEA,MAAM,CAAE,GADV,CAJY,CAOZ,CACEA,MAAM,CAAE,GADV,CAPY,CAUZ,CACEA,MAAM,CAAE,GADV,CAVY,CAAd,CAcA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAW,CAC/B,GAAMC,CAAAA,QAAQ,CAAG,CACfH,MAAM,CAAE,SAAW;AADJ,CAAjB,CAIA,GAAMI,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,cAAD,CAAoB,CAC1C,MAAON,CAAAA,KAAK,CAACO,SAAN,CAAgB,kBAAGN,CAAAA,MAAH,MAAGA,MAAH,OAAgBA,CAAAA,MAAM,GAAKK,cAA3B,EAAhB,CAAP,CACD,CAFD,CAGA,mBACE,sCACE,YAAK,KAAK,CAAE,CAAEE,MAAM,CAAE,EAAV,CAAZ,uBACE,KAAC,WAAD,EACE,KAAK,CAAE,GADT,CAEE,MAAM,CAAE,CAFV,CAGE,OAAO,CACL,KACG,CAACH,eAAe,CAACD,QAAQ,CAACH,MAAV,CAAf,CAAmC,CAApC,GAA0CD,KAAK,CAACS,MAAN,CAAe,CAAzD,CADH,EAEA,EAACN,KAAK,CAACO,KANX,CAQE,gBAAgB,CAAC,6CARnB,UAUGV,KAAK,CAACW,GAAN,CAAU,SAACC,IAAD,CAAOC,KAAP,CAAcC,GAAd,CAAsB,CAC/B,mBACE,KAAC,IACC;AADF,EAEE,UAAU,CAAC,OAFb,CAGE,QAAQ,CAAE,4BAAGC,CAAAA,YAAH,OAAGA,YAAH,oBACR,YACE,KAAK,CAAE,CACLC,OAAO,CAAE,MADJ,CAELC,UAAU,CAAE,QAFP,CAGLC,cAAc,CAAE,QAHX,CAILC,YAAY,CAAE,KAJT,CAKLC,KAAK,CAAE,EALF,CAMLC,MAAM,CAAE,EANH,CAOLC,MAAM,CAAE,gBAPH,CAQLC,KAAK,CAAER,YAAY,CAAG,OAAH,CAAa,MAR3B,CASLS,eAAe,CAAET,YAAY,CAAG,SAAH,CAAe,OATvC,CADT,UAaGH,IAAI,CAACX,MAbR,EADQ,EAHZ,EADF,CAuBD,CAxBA,CAVH,EADF,EADF,EADF,CA0CD,CAlDD,CAmDA,cAAeC,CAAAA,aAAf","sourcesContent":["import React from \"react\";\nimport \"react-step-progress-bar/styles.css\";\nimport { ProgressBar, Step } from \"react-step-progress-bar\";\n\nconst steps = [\n  {\n    status: \"1\",\n  },\n  {\n    status: \"2\",\n  },\n  {\n    status: \"3\",\n  },\n  {\n    status: \"4\",\n  },\n];\nconst ProgressBarUi = (props) => {\n  const transfer = {\n    status: \"Compile\", // change transfer status to progress bar\n  };\n\n  const getStepPosition = (transferStatus) => {\n    return steps.findIndex(({ status }) => status === transferStatus);\n  };\n  return (\n    <>\n      <div style={{ margin: 45 }}>\n        <ProgressBar\n          width={310}\n          height={3}\n          percent={\n            100 *\n              ((getStepPosition(transfer.status) + 1) / (steps.length - 0)) -\n            -props.phase\n          }\n          filledBackground=\"linear-gradient(to right, #6A5EE5, #6A5EE5)\"\n        >\n          {steps.map((step, index, arr) => {\n            return (\n              <Step\n                // position={100 * (index / arr.length)}\n                transition=\"scale\"\n                children={({ accomplished }) => (\n                  <div\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                      borderRadius: \"50%\",\n                      width: 40,\n                      height: 40,\n                      border: \"1px solid gray\",\n                      color: accomplished ? \"white\" : \"gray\",\n                      backgroundColor: accomplished ? \"#6A5EE5\" : \"white\",\n                    }}\n                  >\n                    {step.status}\n                  </div>\n                )}\n              />\n            );\n          })}\n        </ProgressBar>\n      </div>\n    </>\n  );\n};\nexport default ProgressBarUi;\n"]},"metadata":{},"sourceType":"module"}